name: Daily Repository Backup
on:
    schedule:
        - cron: "0 2 * * *" # Run daily at 2 AM UTC (fixed: was missing last *)
    workflow_dispatch: # Allow manual triggering

jobs:
    backup:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout backup repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.BACKUP_TOKEN }}
                  fetch-depth: 0

            - name: Setup Git user
              run: |
                  git config --global user.name "Backup Bot"
                  git config --global user.email "backup@yourorg.com"

            - name: Set backup date
              id: set_date
              run: |
                  BACKUP_DATE=$(date +%Y-%m-%d)
                  echo "BACKUP_DATE=$BACKUP_DATE" >> $GITHUB_ENV
                  echo "Backup date set to: $BACKUP_DATE"

            - name: Create backup directories
              run: |
                  mkdir -p backups/TrinityAI/${{ env.BACKUP_DATE }}
                  mkdir -p backups/TriniTeam/${{ env.BACKUP_DATE }}
                  mkdir -p backups/PageAI/${{ env.BACKUP_DATE }}
                  echo "Backup directories created" > backup-log.txt

            - name: Backup TrinityAI mirror (all branches)
              run: |
                  echo "Starting backup of TrinityAI..."
                  mkdir -p backups/TrinityAI/${{ env.BACKUP_DATE }}
                  git clone --mirror https://${{ secrets.BACKUP_TOKEN }}@github.com/ethank2222/TrinityAI.git backups/TrinityAI/${{ env.BACKUP_DATE }}/TrinityAI.git
                  # Remove credentials from config to prevent secrets in backup
                  sed -i 's|https://.*@github.com|https://github.com|g' backups/TrinityAI/${{ env.BACKUP_DATE }}/TrinityAI.git/config
                  echo "‚úÖ TrinityAI mirrored successfully - $(date)" >> backup-log.txt

            - name: Backup TriniTeam mirror (all branches)
              run: |
                  echo "Starting backup of TriniTeam..."
                  mkdir -p backups/TriniTeam/${{ env.BACKUP_DATE }}
                  git clone --mirror https://${{ secrets.BACKUP_TOKEN }}@github.com/ethank2222/TriniTeam.git backups/TriniTeam/${{ env.BACKUP_DATE }}/TriniTeam.git
                  # Remove credentials from config to prevent secrets in backup
                  sed -i 's|https://.*@github.com|https://github.com|g' backups/TriniTeam/${{ env.BACKUP_DATE }}/TriniTeam.git/config
                  echo "‚úÖ TriniTeam mirrored successfully - $(date)" >> backup-log.txt

            - name: Backup PageAI mirror (all branches)
              run: |
                  echo "Starting backup of PageAI..."
                  mkdir -p backups/PageAI/${{ env.BACKUP_DATE }}
                  git clone --mirror https://${{ secrets.BACKUP_TOKEN }}@github.com/ethank2222/PageAI.git backups/PageAI/${{ env.BACKUP_DATE }}/PageAI.git
                  # Remove credentials from config to prevent secrets in backup
                  sed -i 's|https://.*@github.com|https://github.com|g' backups/PageAI/${{ env.BACKUP_DATE }}/PageAI.git/config
                  echo "‚úÖ PageAI mirrored successfully - $(date)" >> backup-log.txt

            - name: Create backup summary
              run: |
                  SUMMARY_DIR=backups/summary/${{ env.BACKUP_DATE }}
                  mkdir -p "$SUMMARY_DIR"
                  echo "# Backup Summary - ${{ env.BACKUP_DATE }}" > "$SUMMARY_DIR/README.md"
                  echo "" >> "$SUMMARY_DIR/README.md"
                  echo "Backup completed at: $(date)" >> "$SUMMARY_DIR/README.md"
                  echo "Repositories backed up:" >> "$SUMMARY_DIR/README.md"
                  echo "- TrinityAI" >> "$SUMMARY_DIR/README.md"
                  echo "- TriniTeam" >> "$SUMMARY_DIR/README.md"
                  echo "- PageAI" >> "$SUMMARY_DIR/README.md"
                  echo "" >> "$SUMMARY_DIR/README.md"
                  echo "## Backup Log:" >> "$SUMMARY_DIR/README.md"
                  cat backup-log.txt >> "$SUMMARY_DIR/README.md"

            - name: Calculate backup sizes
              run: |
                  echo "" >> backup-log.txt
                  echo "Backup sizes:" >> backup-log.txt
                  for REPO in TrinityAI TriniTeam PageAI; do
                    if [ -d "backups/$REPO/${{ env.BACKUP_DATE }}" ]; then
                      SIZE=$(du -sh "backups/$REPO/${{ env.BACKUP_DATE }}" | cut -f1)
                      echo "- $REPO: $SIZE" >> backup-log.txt
                    fi
                  done

            - name: Cleanup old backups (keep last 5 days per repo)
              run: |
                  cd backups
                  CLEANED_COUNT=0
                  for REPO in TrinityAI TriniTeam PageAI; do
                    if [ -d "$REPO" ]; then
                      cd "$REPO"
                      # Get sorted list of backup directories
                      BACKUPS=($(ls -1d 20* 2>/dev/null | sort || true))
                      COUNT=${#BACKUPS[@]}
                      if [ $COUNT -gt 5 ]; then
                        TO_DELETE=(${BACKUPS[@]:0:$((COUNT - 5))})
                        for OLD in "${TO_DELETE[@]}"; do
                          echo "Deleting old backup: $REPO/$OLD"
                          rm -rf "$OLD"
                          CLEANED_COUNT=$((CLEANED_COUNT + 1))
                        done
                      fi
                      cd ..
                    fi
                  done
                  echo "Cleaned up $CLEANED_COUNT old backup directories" >> ../backup-log.txt

            - name: Commit and push backups
              run: |
                  git add .
                  if git diff --staged --quiet; then
                    echo "No changes to commit"
                    echo "NO_CHANGES=true" >> $GITHUB_ENV
                  else
                    git commit -m "Daily mirror backup - ${{ env.BACKUP_DATE }}"
                    git push origin main
                    echo "BACKUP_COMMITTED=true" >> $GITHUB_ENV
                  fi

            - name: Send success notification
              if: success()
              run: |
                  # Count total repositories backed up
                  REPO_COUNT=$(grep -c "mirrored successfully" backup-log.txt || echo "0")

                  # Get backup sizes
                  BACKUP_SIZES=$(grep -A 10 "Backup sizes:" backup-log.txt | tail -n +2 || echo "Size info not available")

                  # Determine if new backups were created
                  if [ "${{ env.NO_CHANGES }}" = "true" ]; then
                    STATUS_MESSAGE="No new backups needed (repositories unchanged)"
                  else
                    STATUS_MESSAGE="$REPO_COUNT repositories backed up successfully"
                  fi

                  curl -H 'Content-Type: application/json' \
                    -d '{
                      "title": "‚úÖ GitHub Backup Successful",
                      "text": "Daily backup completed successfully on ${{ env.BACKUP_DATE }}.\n\n**Status:** '"$STATUS_MESSAGE"'\n\n**Backup Sizes:**\n```\n'"$BACKUP_SIZES"'\n```\n\n[View workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
                    }' \
                    "${{ secrets.WEBHOOK_URL }}"

            - name: Send failure notification
              if: failure()
              run: |
                  # Try to get the last few lines of logs for context
                  RECENT_LOGS=$(tail -n 10 backup-log.txt 2>/dev/null || echo "No backup logs available")

                  curl -H 'Content-Type: application/json' \
                    -d '{
                      "title": "‚ùå GitHub Backup Failed",
                      "text": "‚ö†Ô∏è **ALERT: Daily backup failed on ${{ env.BACKUP_DATE }}**\n\nImmediate action required to ensure data protection.\n\n**Recent logs:**\n```\n'"$RECENT_LOGS"'\n```\n\nüîó [Check workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n\n**Next Steps:**\n1. Review error logs\n2. Verify token permissions\n3. Check repository access\n4. Run manual backup if needed"
                    }' \
                    "${{ secrets.WEBHOOK_URL }}"

            - name: Send notification on cancellation
              if: cancelled()
              run: |
                  curl -H 'Content-Type: application/json' \
                    -d '{
                      "title": "‚ö†Ô∏è GitHub Backup Cancelled",
                      "text": "Daily backup was cancelled on ${{ env.BACKUP_DATE }}.\n\n[View workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nConsider running a manual backup if needed."
                    }' \
                    "${{ secrets.WEBHOOK_URL }}"
