name: Daily Repository Backup
on:
    schedule:
        - cron: "0 2 * * *" # Run daily at 2 AM UTC
    workflow_dispatch: # Allow manual triggering

jobs:
    backup:
        name: Backup Repositories
        runs-on: ubuntu-latest
        env:
            WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
            GITHUB_REPOSITORY: ${{ github.repository }}
            GITHUB_RUN_ID: ${{ github.run_id }}
        steps:
            - name: Checkout backup repository
              id: checkout
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.BACKUP_TOKEN }}
                  fetch-depth: 0
              continue-on-error: true

            - name: Setup Git user
              id: git_setup
              run: |
                  git config --global user.name "Backup Bot"
                  git config --global user.email "ethank2222@gmail.com"
              continue-on-error: true

            - name: Setup Go
              id: go_setup
              uses: actions/setup-go@v4
              with:
                  go-version: "1.21"
              continue-on-error: true

            - name: Validate environment
              id: validate_env
              env:
                  BACKUP_TOKEN: ${{ secrets.BACKUP_TOKEN }}
              run: |
                  if [ -z "$BACKUP_TOKEN" ]; then
                    echo "‚ùå Error: BACKUP_TOKEN not set"
                    exit 1
                  fi
                  if [ ! -f repositories.txt ]; then
                    echo "‚ùå Error: repositories.txt not found"
                    exit 1
                  fi
                  echo "‚úÖ Environment validated"
              continue-on-error: true

            - name: Send failure webhook
              if: steps.checkout.outcome == 'failure' || steps.git_setup.outcome == 'failure' || steps.go_setup.outcome == 'failure' || steps.validate_env.outcome == 'failure'
              run: |
                  if [ -n "$WEBHOOK_URL" ]; then
                      # Determine error message based on which step failed
                      if [ "${{ steps.checkout.outcome }}" == "failure" ]; then
                          error_msg="Repository checkout failed"
                      elif [ "${{ steps.git_setup.outcome }}" == "failure" ]; then
                          error_msg="Git configuration failed"
                      elif [ "${{ steps.go_setup.outcome }}" == "failure" ]; then
                          error_msg="Go environment setup failed"
                      elif [ "${{ steps.validate_env.outcome }}" == "failure" ]; then
                          error_msg="Environment validation failed"
                      fi
                      
                      curl -X POST -H "Content-Type: application/json" -d '{
                        "type": "message",
                        "attachments": [{
                          "contentType": "application/vnd.microsoft.card.adaptive",
                          "content": {
                            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                            "type": "AdaptiveCard",
                            "version": "1.3",
                            "body": [{
                              "type": "TextBlock",
                              "text": "‚ùå GitHub Backup Failed",
                              "weight": "Bolder",
                              "size": "Large"
                            }, {
                              "type": "TextBlock",
                              "text": "Backup setup failed on '"$(date +%Y-%m-%d)"'",
                              "wrap": true
                            }, {
                              "type": "TextBlock",
                              "text": "[View Workflow](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
                            }, {
                              "type": "FactSet",
                              "facts": [
                                {"title": "Timestamp:", "value": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"},
                                {"title": "Status:", "value": "Failure"},
                                {"title": "Repository:", "value": "'$GITHUB_REPOSITORY'"},
                                {"title": "Workflow Run ID:", "value": "'$GITHUB_RUN_ID'"},
                                {"title": "Error:", "value": "'"$error_msg"'"}
                              ]
                            }]
                          }
                        }]
                      }' "$WEBHOOK_URL" || echo "‚ö†Ô∏è  Failed to send webhook"
                  fi

            - name: Run backup script
              id: backup
              env:
                  BACKUP_TOKEN: ${{ secrets.BACKUP_TOKEN }}
                  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
                  GITHUB_SERVER_URL: ${{ github.server_url }}
                  GITHUB_REPOSITORY: ${{ github.repository }}
                  GITHUB_RUN_ID: ${{ github.run_id }}
              run: |
                  echo "::add-mask::$BACKUP_TOKEN"
                  echo "üöÄ Starting backup process..."

                  # Function to send webhook notification
                  send_webhook() {
                      local status="$1"
                      local message="$2"
                      local webhook_url="$WEBHOOK_URL"
                      
                      if [ -z "$webhook_url" ]; then
                          echo "‚ö†Ô∏è  No webhook URL configured, skipping notification"
                          return
                      fi
                      
                                             local payload=$(cat <<'EOF'
{
  "type": "message",
  "attachments": [{
    "contentType": "application/vnd.microsoft.card.adaptive",
    "content": {
      "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
      "type": "AdaptiveCard",
      "version": "1.3",
      "body": [{
        "type": "TextBlock",
        "text": "STATUS_PLACEHOLDER",
        "weight": "Bolder",
        "size": "Large"
      }, {
        "type": "TextBlock",
        "text": "MESSAGE_PLACEHOLDER",
        "wrap": true
      }, {
        "type": "TextBlock",
        "text": "WORKFLOW_LINK_PLACEHOLDER"
      }, {
        "type": "FactSet",
        "facts": [
          {"title": "Timestamp:", "value": "TIMESTAMP_PLACEHOLDER"},
          {"title": "Status:", "value": "STATUS_VALUE_PLACEHOLDER"},
          {"title": "Repository:", "value": "REPO_PLACEHOLDER"},
          {"title": "Workflow Run ID:", "value": "RUN_ID_PLACEHOLDER"}
        ]
      }]
    }
  }]
}
EOF
                      )
                      
                      # Replace placeholders with actual values
                      payload=$(echo "$payload" | sed "s/STATUS_PLACEHOLDER/$status/g")
                      payload=$(echo "$payload" | sed "s/MESSAGE_PLACEHOLDER/$message on $(date +%Y-%m-%d)/g")
                      payload=$(echo "$payload" | sed "s/WORKFLOW_LINK_PLACEHOLDER/[View Workflow](https:\/\/github.com\/$GITHUB_REPOSITORY\/actions\/runs\/$GITHUB_RUN_ID)/g")
                      payload=$(echo "$payload" | sed "s/TIMESTAMP_PLACEHOLDER/$(date -u +%Y-%m-%dT%H:%M:%SZ)/g")
                      payload=$(echo "$payload" | sed "s/STATUS_VALUE_PLACEHOLDER/Failure/g")
                      payload=$(echo "$payload" | sed "s/REPO_PLACEHOLDER/$GITHUB_REPOSITORY/g")
                      payload=$(echo "$payload" | sed "s/RUN_ID_PLACEHOLDER/$GITHUB_RUN_ID/g")
                      
                      curl -X POST -H "Content-Type: application/json" -d "$payload" "$webhook_url" || echo "‚ö†Ô∏è  Failed to send webhook"
                  }

                  if go run backup.go; then
                      echo "‚úÖ Backup script completed successfully"
                      send_webhook "‚úÖ GitHub Backup Successful" "Backup completed successfully"
                  else
                      echo "‚ùå Backup script failed"
                      send_webhook "‚ùå GitHub Backup Failed" "Backup script failed during compilation or execution"
                                              exit 1
                    fi
              continue-on-error: true

            - name: Send backup script failure webhook
              if: steps.backup.outcome == 'failure'
              run: |
                  if [ -n "$WEBHOOK_URL" ]; then
                      curl -X POST -H "Content-Type: application/json" -d '{
                        "type": "message",
                        "attachments": [{
                          "contentType": "application/vnd.microsoft.card.adaptive",
                          "content": {
                            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                            "type": "AdaptiveCard",
                            "version": "1.3",
                            "body": [{
                              "type": "TextBlock",
                              "text": "‚ùå GitHub Backup Failed",
                              "weight": "Bolder",
                              "size": "Large"
                            }, {
                              "type": "TextBlock",
                              "text": "Backup script failed on '"$(date +%Y-%m-%d)"'",
                              "wrap": true
                            }, {
                              "type": "TextBlock",
                              "text": "[View Workflow](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
                            }, {
                              "type": "FactSet",
                              "facts": [
                                {"title": "Timestamp:", "value": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"},
                                {"title": "Status:", "value": "Failure"},
                                {"title": "Repository:", "value": "'$GITHUB_REPOSITORY'"},
                                {"title": "Workflow Run ID:", "value": "'$GITHUB_RUN_ID'"},
                                {"title": "Error:", "value": "Backup script execution failed"}
                              ]
                            }]
                          }
                        }]
                      }' "$WEBHOOK_URL" || echo "‚ö†Ô∏è  Failed to send webhook"
                  fi

            - name: Check for changes
              id: changes
              run: |
                  if git diff --quiet; then
                    echo "no_changes=true" >> $GITHUB_OUTPUT
                    echo "‚ÑπÔ∏è  No changes to commit"
                  else
                    echo "no_changes=false" >> $GITHUB_OUTPUT
                    echo "‚ÑπÔ∏è  Changes detected"
                  fi

            - name: Commit and push changes
              id: commit_push
              if: steps.changes.outputs.no_changes != 'true'
              run: |
                  git add .
                  git commit -m "Daily mirror backup - $(date +%Y-%m-%d)"
                  git push origin main
                  echo "‚úÖ Changes committed and pushed"
              continue-on-error: true

            - name: Send commit/push failure webhook
              if: steps.commit_push.outcome == 'failure'
              run: |
                  if [ -n "$WEBHOOK_URL" ]; then
                      curl -X POST -H "Content-Type: application/json" -d '{
                        "type": "message",
                        "attachments": [{
                          "contentType": "application/vnd.microsoft.card.adaptive",
                          "content": {
                            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                            "type": "AdaptiveCard",
                            "version": "1.3",
                            "body": [{
                              "type": "TextBlock",
                              "text": "‚ö†Ô∏è GitHub Backup Warning",
                              "weight": "Bolder",
                              "size": "Large"
                            }, {
                              "type": "TextBlock",
                              "text": "Backup completed but commit/push failed on '"$(date +%Y-%m-%d)"'",
                              "wrap": true
                            }, {
                              "type": "TextBlock",
                              "text": "[View Workflow](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
                            }, {
                              "type": "FactSet",
                              "facts": [
                                {"title": "Timestamp:", "value": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"},
                                {"title": "Status:", "value": "Warning"},
                                {"title": "Repository:", "value": "'$GITHUB_REPOSITORY'"},
                                {"title": "Workflow Run ID:", "value": "'$GITHUB_RUN_ID'"},
                                {"title": "Error:", "value": "Git commit/push failed"}
                              ]
                            }]
                          }
                        }]
                      }' "$WEBHOOK_URL" || echo "‚ö†Ô∏è  Failed to send webhook"
                  fi

    cleanup:
        name: Cleanup
        runs-on: ubuntu-latest
        needs: backup
        if: always()
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.21"

            - name: Run cleanup checks
              run: |
                  echo "‚ÑπÔ∏è  Running cleanup checks..."
                  if [ -f backup-results.json ]; then
                    echo "‚ÑπÔ∏è  Found backup results file"
                  fi
                  if [ -d backups ]; then
                    echo "‚ÑπÔ∏è  Backup directory exists"
                    zip_count=$(find backups -name "*.zip" 2>/dev/null | wc -l)
                    echo "  - ZIP files: $zip_count"
                  else
                    echo "‚ö†Ô∏è  No backup directory found"
                  fi
                  echo "‚úÖ Cleanup checks completed"
