name: Repository Backup

on:
    schedule:
        - cron: "0 2 * * *" # Daily at 2 AM UTC
    workflow_dispatch:

env:
    AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
    AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
    GITHUB_TOKEN: ${{ secrets.BACKUP_TOKEN }}
    WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
    CONTAINER_NAME: "repo-backups"
    RETENTION_DAYS: 10

jobs:
    backup:
        runs-on: ubuntu-latest
        timeout-minutes: 120

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Azure CLI
              run: |
                  curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                  sudo apt-get update && sudo apt-get install -y jq

                  # Ensure container exists
                  az storage container create \
                    --account-name "$AZURE_STORAGE_ACCOUNT" \
                    --account-key "$AZURE_STORAGE_KEY" \
                    --name "$CONTAINER_NAME" \
                    --public-access off || true

            - name: Backup Repositories
              run: |
                  set -e

                  # Initialize counters
                  SUCCESS_COUNT=0
                  FAIL_COUNT=0
                  FAILED_REPOS=""
                  DATE_PREFIX=$(date +%Y%m%d_%H%M%S)

                  # Function to send webhook
                  send_webhook() {
                    if [ -z "$WEBHOOK_URL" ]; then
                      return 0
                    fi
                    
                    local success="$1"
                    local message="$2"
                    
                    curl -X POST "$WEBHOOK_URL" \
                      -H "Content-Type: application/json" \
                      -d "{
                        \"success\": $success,
                        \"message\": \"$message\",
                        \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\",
                        \"workflow\": \"repository-backup\"
                      }" \
                      --max-time 10 || true
                  }

                  # Function to backup a single repository
                  backup_repo() {
                    local repo_url="$1"
                    local repo_name=$(basename "$repo_url" .git)
                    local temp_dir=$(mktemp -d)
                    
                    echo "üì¶ Backing up: $repo_name"
                    
                    # Clone repository
                    if [ -n "$GITHUB_TOKEN" ] && [[ "$repo_url" == *"github.com"* ]]; then
                      # Add token for private repos
                      local auth_url="https://${GITHUB_TOKEN}@${repo_url#https://}"
                    else
                      local auth_url="$repo_url"
                    fi
                    
                    if ! git clone --mirror "$auth_url" "$temp_dir/$repo_name" 2>/dev/null; then
                      echo "‚ùå Failed to clone: $repo_name"
                      rm -rf "$temp_dir"
                      return 1
                    fi
                    
                    # Create archive
                    local archive_name="${repo_name}_${DATE_PREFIX}.zip"
                    cd "$temp_dir"
                    if ! zip -qr "$archive_name" "$repo_name"; then
                      echo "‚ùå Failed to archive: $repo_name"
                      rm -rf "$temp_dir"
                      return 1
                    fi
                    
                    # Upload to Azure
                    if ! az storage blob upload \
                      --account-name "$AZURE_STORAGE_ACCOUNT" \
                      --account-key "$AZURE_STORAGE_KEY" \
                      --container-name "$CONTAINER_NAME" \
                      --name "$archive_name" \
                      --file "$archive_name" \
                      --overwrite \
                      --output none 2>/dev/null; then
                      echo "‚ùå Failed to upload: $repo_name"
                      rm -rf "$temp_dir"
                      return 1
                    fi
                    
                    echo "‚úÖ Successfully backed up: $repo_name"
                    rm -rf "$temp_dir"
                    return 0
                  }

                  # Process each repository
                  while IFS= read -r repo_url; do
                    # Skip comments and empty lines
                    if [[ "$repo_url" =~ ^[[:space:]]*# ]] || [[ -z "${repo_url// }" ]]; then
                      continue
                    fi
                    
                    if backup_repo "$repo_url"; then
                      SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                    else
                      FAIL_COUNT=$((FAIL_COUNT + 1))
                      FAILED_REPOS="${FAILED_REPOS}$(basename "$repo_url" .git), "
                    fi
                  done < repos.txt

                  # Clean up old backups
                  echo "üßπ Cleaning up old backups..."
                  CUTOFF_DATE=$(date -u -d "$RETENTION_DAYS days ago" +%Y-%m-%dT%H:%M:%S)

                  az storage blob list \
                    --account-name "$AZURE_STORAGE_ACCOUNT" \
                    --account-key "$AZURE_STORAGE_KEY" \
                    --container-name "$CONTAINER_NAME" \
                    --query "[?properties.lastModified < '$CUTOFF_DATE'].name" \
                    --output tsv | while read -r blob_name; do
                    if [ -n "$blob_name" ]; then
                      echo "  Deleting: $blob_name"
                      az storage blob delete \
                        --account-name "$AZURE_STORAGE_ACCOUNT" \
                        --account-key "$AZURE_STORAGE_KEY" \
                        --container-name "$CONTAINER_NAME" \
                        --name "$blob_name" \
                        --output none || true
                    fi
                  done

                  # Send webhook notification
                  if [ $FAIL_COUNT -eq 0 ]; then
                    send_webhook true "Backup successful: $SUCCESS_COUNT repositories backed up"
                    echo "‚úÖ Backup completed successfully: $SUCCESS_COUNT repositories"
                  else
                    send_webhook false "Backup completed with errors: $SUCCESS_COUNT succeeded, $FAIL_COUNT failed (${FAILED_REPOS%, })"
                    echo "‚ö†Ô∏è Backup completed with $FAIL_COUNT failures"
                    exit 1
                  fi
